services:
  # Base de datos MySQL
  db:
    image: mysql:8.0
    container_name: plataforma-calendario-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: plataforma_calendario
      MYSQL_USER: laravel_user
      MYSQL_PASSWORD: laravel_password
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - plataforma-network
    # Healthcheck para la base de datos
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Laravel
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: plataforma-calendario-backend
    restart: unless-stopped
    working_dir: /var/www
    user: 'www'
    volumes:
      - ./backend:/var/www
    environment:
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=plataforma_calendario
      - DB_USERNAME=laravel_user
      - DB_PASSWORD=laravel_password
    networks:
      - plataforma-network
    expose:
      - "9000"
    depends_on:
      db:
        condition: service_healthy # Espera a que la BD esté lista

  # Frontend Next.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: plataforma-calendario-frontend
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    ports:
      - "3000:3000"
    networks:
      - plataforma-network
    command: npm run dev
    # Healthcheck para el servidor de desarrollo de Next.js
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Servidor web Nginx
  nginx:
    image: nginx:alpine
    container_name: plataforma-calendario-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - plataforma-network
    depends_on:
      backend:
        condition: service_started # El backend es rápido, con 'started' es suficiente
      frontend:
        condition: service_healthy # Espera a que Next.js esté listo

volumes:
  mysql_data:
    driver: local

networks:
  plataforma-network:
    driver: bridge